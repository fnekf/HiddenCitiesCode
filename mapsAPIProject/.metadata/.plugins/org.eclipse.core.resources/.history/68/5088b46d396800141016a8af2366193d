package com.example.hiddencitiesmap;

import android.app.Activity;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import com.google.android.gms.maps.CameraUpdateFactory;

import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnMyLocationButtonClickListener;
import com.google.android.gms.maps.SupportMapFragment;

import android.location.Location;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.widget.SeekBar;
import android.widget.SeekBar.OnSeekBarChangeListener;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;


public class MainActivity extends FragmentActivity   

	implements
    ConnectionCallbacks,
    OnConnectionFailedListener,
    LocationListener,
    OnMyLocationButtonClickListener ,
    OnSeekBarChangeListener{

private GoogleMap mMap;

private GoogleApiClient mGoogleApiClient;

private static final LatLng MELBOURNE = new LatLng(-37.81319, 144.96298);
private static final LatLng SYDNEY = new LatLng(-33.87365, 151.20689);
private static final LatLng ADELAIDE = new LatLng(-34.92873, 138.59995);
private static final LatLng PERTH = new LatLng(-31.95285, 115.85734);

private static final LatLng LHR = new LatLng(51.471547, -0.460052);
private static final LatLng LAX = new LatLng(33.936524, -118.377686);
private static final LatLng JFK = new LatLng(40.641051, -73.777485);
private static final LatLng AKL = new LatLng(-37.006254, 174.783018);

private static final int WIDTH_MAX = 50;
private static final int HUE_MAX = 360;
private static final int ALPHA_MAX = 255;

private Polyline mMutablePolyline;
private SeekBar mColorBar;
private SeekBar mAlphaBar;
private SeekBar mWidthBar;
//private TextView mMessageView;

// These settings are the same as the settings for the map. They will in fact give you updates
// at the maximal rates currently possible.
private static final LocationRequest REQUEST = LocationRequest.create()
        .setInterval(5000)         // 5 seconds
        .setFastestInterval(16)    // 16ms = 60fps
        .setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);



@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
   // mMessageView = (TextView) findViewById(R.id.message_text);
//    mColorBar = (SeekBar) findViewById(R.id.hueSeekBar);
//    mColorBar.setMax(HUE_MAX);
//    mColorBar.setProgress(0);
//
//    mAlphaBar = (SeekBar) findViewById(R.id.alphaSeekBar);
//    mAlphaBar.setMax(ALPHA_MAX);
//    mAlphaBar.setProgress(255);
//
//    mWidthBar = (SeekBar) findViewById(R.id.widthSeekBar);
//    mWidthBar.setMax(WIDTH_MAX);
//    mWidthBar.setProgress(10);

    setUpMapIfNeeded();
}

@Override
protected void onResume() {
    super.onResume();
    setUpMapIfNeeded();
    setUpGoogleApiClientIfNeeded();
    mGoogleApiClient.connect();
}

@Override
public void onPause() {
    super.onPause();
    if (mGoogleApiClient != null) {
        mGoogleApiClient.disconnect();
    }
}

private void setUpMapIfNeeded() {
    // Do a null check to confirm that we have not already instantiated the map.
    if (mMap == null) {
        // Try to obtain the map from the SupportMapFragment.
        mMap = ((SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map))
                .getMap();
        // Check if we were successful in obtaining the map.
        if (mMap != null) {
            mMap.setMyLocationEnabled(true);
            mMap.setOnMyLocationButtonClickListener(this);
            setUpMap();
        }
    }
}
private void setUpMap() {

    // A simple polyline with the default options from Melbourne-Adelaide-Perth.
    mMap.addPolyline((new PolylineOptions())
            .add(MELBOURNE, ADELAIDE, PERTH));

    // A geodesic polyline that goes around the world.
    mMap.addPolyline((new PolylineOptions())
            .add(LHR, AKL, LAX, JFK, LHR)
            .width(5)
            .color(Color.BLUE)
            .geodesic(true));

    // Rectangle centered at Sydney.  This polyline will be mutable.
    int radius = 5;
    PolylineOptions options = new PolylineOptions()
            .add(new LatLng(SYDNEY.latitude + radius, SYDNEY.longitude + radius))
            .add(new LatLng(SYDNEY.latitude + radius, SYDNEY.longitude - radius))
            .add(new LatLng(SYDNEY.latitude - radius, SYDNEY.longitude - radius))
            .add(new LatLng(SYDNEY.latitude - radius, SYDNEY.longitude + radius))
            .add(new LatLng(SYDNEY.latitude + radius, SYDNEY.longitude + radius));
    int color = Color.HSVToColor(
            mAlphaBar.getProgress(), new float[] {mColorBar.getProgress(), 1, 1});
    mMutablePolyline = mMap.addPolyline(options
            .color(color)
            .width(mWidthBar.getProgress()));

//    mColorBar.setOnSeekBarChangeListener(this);
//    mAlphaBar.setOnSeekBarChangeListener(this);
//    mWidthBar.setOnSeekBarChangeListener(this);

    // Move the map so that it is centered on the mutable polyline.
    mMap.moveCamera(CameraUpdateFactory.newLatLng(SYDNEY));
}
@Override
public void onStopTrackingTouch(SeekBar seekBar) {
    // Don't do anything here.
}

@Override
public void onStartTrackingTouch(SeekBar seekBar) {
    // Don't do anything here.
}

@Override
public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
    if (mMutablePolyline == null) {
        return;
    }

    if (seekBar == mColorBar) {
        mMutablePolyline.setColor(Color.HSVToColor(
                Color.alpha(mMutablePolyline.getColor()), new float[] {progress, 1, 1}));
    } else if (seekBar == mAlphaBar) {
        float[] prevHSV = new float[3];
        Color.colorToHSV(mMutablePolyline.getColor(), prevHSV);
        mMutablePolyline.setColor(Color.HSVToColor(progress, prevHSV));
    } else if (seekBar == mWidthBar) {
        mMutablePolyline.setWidth(progress);
    }
}

private void setUpGoogleApiClientIfNeeded() {
    if (mGoogleApiClient == null) {
        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .addApi(LocationServices.API)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .build();
    }
}

/**
 * Button to get current Location. This demonstrates how to get the current Location as required
 * without needing to register a LocationListener.
 */
public void showMyLocation(View view) {
    if (mGoogleApiClient != null && mGoogleApiClient.isConnected()) {
        String msg = "Location = "
                + LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        Toast.makeText(getApplicationContext(), msg, Toast.LENGTH_SHORT).show();
    }
}

/**
 * Implementation of {@link LocationListener}.
 */
@Override
public void onLocationChanged(Location location) {
   // mMessageView.setText("Location = " + location);
}

/**
 * Callback called when connected to GCore. Implementation of {@link ConnectionCallbacks}.
 */
@Override
public void onConnected(Bundle connectionHint) {
    LocationServices.FusedLocationApi.requestLocationUpdates(
            mGoogleApiClient,
            REQUEST,
            this);  // LocationListener
}

/**
 * Callback called when disconnected from GCore. Implementation of {@link ConnectionCallbacks}.
 */
@Override
public void onConnectionSuspended(int cause) {
    // Do nothing
}

/**
 * Implementation of {@link OnConnectionFailedListener}.
 */
@Override
public void onConnectionFailed(ConnectionResult result) {
    // Do nothing
}

@Override
public boolean onMyLocationButtonClick() {
    Toast.makeText(this, "MyLocation button clicked", Toast.LENGTH_SHORT).show();
    // Return false so that we don't consume the event and the default behavior still occurs
    // (the camera animates to the user's current position).
    return false;
}

}
